{"version":3,"file":"index.js","sources":["../src/js/models/base-api-response.js","../src/js/models/filter-models.js","../src/js/models/exercise-models.js","../src/js/your-energy-api.js","../src/js/main.js"],"sourcesContent":["/**\n * BaseApiResponse class\n * This class is used to represent the base structure of an API response.\n * It contains properties for pagination and results.\n *\n * @class\n * @param {Object} response - The API response object.\n * @param {Array} response.results - The array of results.\n * @param {number} response.page - The current page number.\n * @param {number} response.perPage - The number of items per page.\n * @param {number} response.totalPages - The total number of pages.\n * @property {Array} results - The array of results.\n * @property {number} page - The current page number.\n * @property {number} perPage - The number of items per page.\n * @property {number} totalPages - The total number of pages.\n */\nclass BaseApiResponse {\n  constructor(response){\n    this.page = response.page;\n    this.perPage = response.perPage;\n    this.totalPages = response.totalPages;\n    this.results = response.results;\n  }\n}\n\nexport default BaseApiResponse;","import BaseApiResponse from './base-api-response.js';\n\n/**\n * Class representing a filter model.\n * @class\n * @param {string} filter - The filter type.\n * @param {string} name - The name of the filter.\n * @param {string} imgURL - The URL of the filter image.\n * @property {string} filter - The filter type.\n * @property {string} name - The name of the filter.\n * @property {string} imgURL - The URL of the filter image.\n */\nclass FilterModel {\n  constructor(filter, name, imgURL) {\n    this.filter = filter;\n    this.name = name;\n    this.imgURL = imgURL;\n  }\n}\n\n/**\n * Class representing a filter request.\n * @class\n * @param {string} filter - The filter type.\n * @param {number} page - The current page number.\n * @param {number} limit - The number of items per page.\n * @property {string} filter - The filter type.\n * @property {number} page - The current page number.\n * @property {number} limit - The number of items per page.\n */\nclass FilterRequest {\n    constructor(filter, page, limit) {\n        this.filter = filter;\n        this.page = page;\n        this.limit = limit;\n    }\n}\n\n/**\n * Class representing a filter response.\n * @class\n * @param {Object} response - The API response object.\n * @param {Array} response.data.results - The array of filter results.\n * @param {number} response.data.page - The current page number.\n * @param {number} response.data.perPage - The number of items per page.\n * @param {number} response.data.totalPages - The total number of pages.\n * @property {Array} filters - The array of FilterModel instances.\n * @property {number} page - The current page number.\n * @property {number} perPage - The number of items per page.\n * @property {number} totalPages - The total number of pages.\n */\nclass FilterResponse extends BaseApiResponse{\n    constructor(response) {\n        super(response);\n    }\n\n    /**\n     * Get the array of FilterModel instances.\n     * @returns {Array} The array of FilterModel instances.\n     */\n    getFilters() {\n      return this.results.map(filter => new FilterModel(filter.filter, filter.name, filter.imgURL));\n    }\n}\n\nexport { FilterModel, FilterRequest, FilterResponse };","import BaseApiResponse from './base-api-response.js';\n\n/**\n * Class representing an exercise filter.\n * @class\n * @param {string} bodypart - The body part to filter exercises by.\n * @param {string} muscles - The muscles to filter exercises by.\n * @param {string} equipment - The equipment to filter exercises by.\n * @param {string} keyword - The keyword to search exercises by.\n * @param {number} [page=1] - The current page number.\n * @param {number} [limit=10] - The number of items per page.\n * @property {string} bodypart - The body part to filter exercises by.\n * @property {string} muscles - The muscles to filter exercises by.\n * @property {string} equipment - The equipment to filter exercises by.\n * @property {string} keyword - The keyword to search exercises by.\n * @property {number} page - The current page number.\n * @property {number} limit - The number of items per page.\n */\nclass ExerciseFilter {\n  constructor(bodypart, muscles, equipment, keyword, page = 1, limit = 10) {\n    this.bodypart = bodypart;\n    this.muscles = muscles;\n    this.equipment = equipment;\n    this.keyword = keyword;\n    this.page = page;\n    this.limit = limit;\n  }\n}\n\n/**\n * Class representing an exercise model.\n * @class\n * @param {Object} result - The exercise data object.\n * @param {string} result._id - The unique ID of the exercise.\n * @param {string} result.bodyPart - The body part targeted by the exercise.\n * @param {string} result.equipment - The equipment used for the exercise.\n * @param {string} result.gifUrl - The URL of the exercise GIF.\n * @param {string} result.name - The name of the exercise.\n * @param {string} result.target - The target muscle group.\n * @param {string} result.description - The description of the exercise.\n * @param {number} result.rating - The rating of the exercise.\n * @param {number} result.burnedCalories - The calories burned by the exercise.\n * @param {number} result.time - The time required for the exercise.\n * @param {number} result.popularity - The popularity score of the exercise.\n * @property {string} id - The unique ID of the exercise.\n * @property {string} bodyPart - The body part targeted by the exercise.\n * @property {string} equipment - The equipment used for the exercise.\n * @property {string} gifUrl - The URL of the exercise GIF.\n * @property {string} name - The name of the exercise.\n * @property {string} target - The target muscle group.\n * @property {string} description - The description of the exercise.\n * @property {number} rating - The rating of the exercise.\n * @property {number} burnedCalories - The calories burned by the exercise.\n * @property {number} time - The time required for the exercise.\n * @property {number} popularity - The popularity score of the exercise.\n */\nclass ExerciseModel {\n  constructor(result) {\n    this.id = result._id;\n    this.bodyPart = result.bodyPart;\n    this.equipment = result.equipment;\n    this.gifUrl = result.gifUrl;\n    this.name = result.name;\n    this.target = result.target;\n    this.description = result.description;\n    this.rating = result.rating;\n    this.burnedCalories = result.burnedCalories;\n    this.time = result.time;\n    this.popularity = result.popularity;\n  }\n}\n\n/**\n * Class representing an exercise response.\n * @class\n * @extends BaseApiResponse\n * @param {Object} response - The API response object.\n * @param {Array} response.data.results - The array of exercise results.\n * @param {number} response.data.page - The current page number.\n * @param {number} response.data.perPage - The number of items per page.\n * @param {number} response.data.totalPages - The total number of pages.\n * @property {Array} results - The array of exercise results.\n * @property {number} page - The current page number.\n * @property {number} perPage - The number of items per page.\n * @property {number} totalPages - The total number of pages.\n */\nclass ExerciseResponse extends BaseApiResponse {\n  constructor(response) {\n    super(response);\n  }\n\n  /**\n   * Get the array of ExerciseModel instances.\n   * @returns {Array<ExerciseModel>} The array of ExerciseModel instances.\n   */\n  getExercises() {\n    return this.results.map(exercise => new ExerciseModel(exercise));\n  }\n}\n\n/**\n * Class representing an exercise rating patch request.\n * @class\n * @param {number} rate - The rating for the exercise.\n * @param {string} email - The email of the user.\n * @param {string} review - The review text for the exercise.\n * @property {number} rate - The rating for the exercise.\n * @property {string} email - The email of the user.\n * @property {string} review - The review text for the exercise.\n */\nclass ExerciseRatingPatchRequest {\n  constructor(rate, email, review) {\n    this.rate = rate;\n    this.email = email;\n    this.review = review;\n  }\n}\n\nexport { ExerciseFilter, ExerciseModel, ExerciseResponse, ExerciseRatingPatchRequest };","import axios from 'axios';\nimport { FilterRequest, FilterResponse } from './models/filter-models.js';\nimport { ExerciseFilter, ExerciseModel, ExerciseResponse } from './models/exercise-models.js';\n\nconst API_URL = 'https://your-energy.b.goit.study/api';\n\n/**\n * YourEnergyAPI class\n * This class is used to interact with the Your Energy API.\n */\nclass YourEnergyAPI {\n  constructor() {\n    this._api = axios.create({\n      baseURL: API_URL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * Fetches filters from the API.\n   * @param {FilterRequest} filterRequest\n   * @returns {Promise<FilterResponse>}\n   */\n  async getFilters(filterRequest) {\n    try {\n      const response = await this._api.get('/filters', {\n        params: filterRequest,\n      });\n      return new FilterResponse(response.data);\n    } catch (error) {\n      console.error('Error fetching filters:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetches exercises by filter from the API.\n   * @param {ExerciseFilter} exerciseFilter\n   * @returns {Promise<ExerciseResponse>}\n   */\n  async fetchExercisesByFilter(exerciseFilter) {\n    try {\n      const response = await this._api.get('/exercises', {\n        params: exerciseFilter,\n      });\n      return new ExerciseResponse(response.data);\n    } catch (error) {\n      console.error('Error fetching exercises by filter:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetches exercises by ID from the API.\n   * @param {string} id\n   * @returns {Promise<ExerciseModel>}\n   */\n  async fetchExercisesById(id) {\n    try {\n      const response = await this._api.get(`/exercises/${id}`);\n      return new ExerciseModel(response.data);\n    } catch (error) {\n      console.error('Error fetching exercises by ID:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Updates exercise rating by ID.\n   * @param {string} id\n   * @param {ExerciseRatingPatchRequest} request\n   * @returns {Promise<ExerciseModel>}\n   */\n  async patchExerciseRating(id, request) {\n    try {\n      const response = await this._api.patch(`/exercises/${id}/rating`, request);\n      return new ExerciseModel(response.data);\n    } catch (error) {\n      console.error('Error updating exercise rating:', error);\n      throw error;\n    }\n  }\n}\n\nconst yourEnergyAPI = new YourEnergyAPI();\nexport default yourEnergyAPI;","import yourEnergyAPI from './your-energy-api.js';\nimport { FilterRequest } from './models/filter-models.js';\nimport { ExerciseFilter, ExerciseRatingPatchRequest } from './models/exercise-models.js';\n\n// example Filters\nconst filterRequest = new FilterRequest('Body parts', 1, 5);\nyourEnergyAPI.getFilters(filterRequest)\n  .then(response => {\n    console.log('Response:', response);\n    console.log('Filters:', response.getFilters());\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n\n// example Exercises by filter\nconst exerciseFilter = new ExerciseFilter('back', 'lats', 'barbell', 'pull', 1, 5);\nyourEnergyAPI.fetchExercisesByFilter(exerciseFilter)\n  .then(response => {\n    console.log('Response:', response);\n    console.log('Exercises:', response.getExercises());\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n\n// example Exercises by ID\nconst exerciseId = '64f389465ae26083f39b1ab2';\nyourEnergyAPI.fetchExercisesById(exerciseId)\n  .then(response => {\n    console.log('Response:', response);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n\n// example Exercise patch rating\nconst exerciseRatingRequest = new ExerciseRatingPatchRequest(\n  3,\n  `test${Date.now()}@gmail.com`, // it requires email to be uniq\n  'Great exercise! Very effective.');\nyourEnergyAPI.patchExerciseRating(exerciseId, exerciseRatingRequest)\n  .then(response => {\n    console.log('Response:', response);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n"],"names":["BaseApiResponse","response","FilterModel","filter","name","imgURL","FilterRequest","page","limit","FilterResponse","ExerciseFilter","bodypart","muscles","equipment","keyword","ExerciseModel","result","ExerciseResponse","exercise","ExerciseRatingPatchRequest","rate","email","review","API_URL","YourEnergyAPI","axios","filterRequest","error","exerciseFilter","id","request","yourEnergyAPI","exerciseId","exerciseRatingRequest"],"mappings":"svBAgBA,MAAMA,CAAgB,CACpB,YAAYC,EAAS,CACnB,KAAK,KAAOA,EAAS,KACrB,KAAK,QAAUA,EAAS,QACxB,KAAK,WAAaA,EAAS,WAC3B,KAAK,QAAUA,EAAS,OACzB,CACH,CCXA,MAAMC,CAAY,CAChB,YAAYC,EAAQC,EAAMC,EAAQ,CAChC,KAAK,OAASF,EACd,KAAK,KAAOC,EACZ,KAAK,OAASC,CACf,CACH,CAYA,MAAMC,CAAc,CAChB,YAAYH,EAAQI,EAAMC,EAAO,CAC7B,KAAK,OAASL,EACd,KAAK,KAAOI,EACZ,KAAK,MAAQC,CAChB,CACL,CAeA,MAAMC,UAAuBT,CAAe,CACxC,YAAYC,EAAU,CAClB,MAAMA,CAAQ,CACjB,CAMD,YAAa,CACX,OAAO,KAAK,QAAQ,IAAIE,GAAU,IAAID,EAAYC,EAAO,OAAQA,EAAO,KAAMA,EAAO,MAAM,CAAC,CAC7F,CACL,CC7CA,MAAMO,CAAe,CACnB,YAAYC,EAAUC,EAASC,EAAWC,EAASP,EAAO,EAAGC,EAAQ,GAAI,CACvE,KAAK,SAAWG,EAChB,KAAK,QAAUC,EACf,KAAK,UAAYC,EACjB,KAAK,QAAUC,EACf,KAAK,KAAOP,EACZ,KAAK,MAAQC,CACd,CACH,CA6BA,MAAMO,CAAc,CAClB,YAAYC,EAAQ,CAClB,KAAK,GAAKA,EAAO,IACjB,KAAK,SAAWA,EAAO,SACvB,KAAK,UAAYA,EAAO,UACxB,KAAK,OAASA,EAAO,OACrB,KAAK,KAAOA,EAAO,KACnB,KAAK,OAASA,EAAO,OACrB,KAAK,YAAcA,EAAO,YAC1B,KAAK,OAASA,EAAO,OACrB,KAAK,eAAiBA,EAAO,eAC7B,KAAK,KAAOA,EAAO,KACnB,KAAK,WAAaA,EAAO,UAC1B,CACH,CAgBA,MAAMC,UAAyBjB,CAAgB,CAC7C,YAAYC,EAAU,CACpB,MAAMA,CAAQ,CACf,CAMD,cAAe,CACb,OAAO,KAAK,QAAQ,IAAIiB,GAAY,IAAIH,EAAcG,CAAQ,CAAC,CAChE,CACH,CAYA,MAAMC,CAA2B,CAC/B,YAAYC,EAAMC,EAAOC,EAAQ,CAC/B,KAAK,KAAOF,EACZ,KAAK,MAAQC,EACb,KAAK,OAASC,CACf,CACH,CChHA,MAAMC,EAAU,uCAMhB,MAAMC,CAAc,CAClB,aAAc,CACZ,KAAK,KAAOC,EAAM,OAAO,CACvB,QAASF,EACT,QAAS,CACP,eAAgB,kBACjB,CACP,CAAK,CACF,CAOD,MAAM,WAAWG,EAAe,CAC9B,GAAI,CACF,MAAMzB,EAAW,MAAM,KAAK,KAAK,IAAI,WAAY,CAC/C,OAAQyB,CAChB,CAAO,EACD,OAAO,IAAIjB,EAAeR,EAAS,IAAI,CACxC,OAAQ0B,EAAO,CACd,cAAQ,MAAM,0BAA2BA,CAAK,EACxCA,CACP,CACF,CAOD,MAAM,uBAAuBC,EAAgB,CAC3C,GAAI,CACF,MAAM3B,EAAW,MAAM,KAAK,KAAK,IAAI,aAAc,CACjD,OAAQ2B,CAChB,CAAO,EACD,OAAO,IAAIX,EAAiBhB,EAAS,IAAI,CAC1C,OAAQ0B,EAAO,CACd,cAAQ,MAAM,sCAAuCA,CAAK,EACpDA,CACP,CACF,CAOD,MAAM,mBAAmBE,EAAI,CAC3B,GAAI,CACF,MAAM5B,EAAW,MAAM,KAAK,KAAK,IAAI,cAAc4B,CAAE,EAAE,EACvD,OAAO,IAAId,EAAcd,EAAS,IAAI,CACvC,OAAQ0B,EAAO,CACd,cAAQ,MAAM,kCAAmCA,CAAK,EAChDA,CACP,CACF,CAQD,MAAM,oBAAoBE,EAAIC,EAAS,CACrC,GAAI,CACF,MAAM7B,EAAW,MAAM,KAAK,KAAK,MAAM,cAAc4B,CAAE,UAAWC,CAAO,EACzE,OAAO,IAAIf,EAAcd,EAAS,IAAI,CACvC,OAAQ0B,EAAO,CACd,cAAQ,MAAM,kCAAmCA,CAAK,EAChDA,CACP,CACF,CACH,CAEA,MAAMI,EAAgB,IAAIP,ECjFpBE,EAAgB,IAAIpB,EAAc,aAAc,EAAG,CAAC,EAC1DyB,EAAc,WAAWL,CAAa,EACnC,KAAKzB,GAAY,CAChB,QAAQ,IAAI,YAAaA,CAAQ,EACjC,QAAQ,IAAI,WAAYA,EAAS,WAAY,CAAA,CACjD,CAAG,EACA,MAAM0B,GAAS,CACd,QAAQ,MAAM,SAAUA,CAAK,CACjC,CAAG,EAGH,MAAMC,EAAiB,IAAIlB,EAAe,OAAQ,OAAQ,UAAW,OAAQ,EAAG,CAAC,EACjFqB,EAAc,uBAAuBH,CAAc,EAChD,KAAK3B,GAAY,CAChB,QAAQ,IAAI,YAAaA,CAAQ,EACjC,QAAQ,IAAI,aAAcA,EAAS,aAAc,CAAA,CACrD,CAAG,EACA,MAAM0B,GAAS,CACd,QAAQ,MAAM,SAAUA,CAAK,CACjC,CAAG,EAGH,MAAMK,EAAa,2BACnBD,EAAc,mBAAmBC,CAAU,EACxC,KAAK/B,GAAY,CAChB,QAAQ,IAAI,YAAaA,CAAQ,CACrC,CAAG,EACA,MAAM0B,GAAS,CACd,QAAQ,MAAM,SAAUA,CAAK,CACjC,CAAG,EAGH,MAAMM,EAAwB,IAAId,EAChC,EACA,OAAO,KAAK,IAAG,CAAE,aACjB,iCAAiC,EACnCY,EAAc,oBAAoBC,EAAYC,CAAqB,EAChE,KAAKhC,GAAY,CAChB,QAAQ,IAAI,YAAaA,CAAQ,CACrC,CAAG,EACA,MAAM0B,GAAS,CACd,QAAQ,MAAM,SAAUA,CAAK,CACjC,CAAG"}